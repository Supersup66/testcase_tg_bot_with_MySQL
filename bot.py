import threading
import time
from datetime import date, timedelta

from telebot.types import InlineKeyboardButton as InButton
from telebot.types import InlineKeyboardMarkup as InKeyboard
from telebot.types import KeyboardButton as Button
from telebot.types import Message
from telebot.types import ReplyKeyboardMarkup as Keyboard

from constants import ADMIN_ID
from logger import logger
from core import check_activity, bot_unit, main_menu, last_active_time
from database.queries import fetch_users, insert_user, Order

bot = bot_unit
order = None

threading.Thread(target=check_activity, daemon=True).start()


@bot.message_handler(commands=['start'])
def start(message: Message):
    chat_id = message.chat.id
    global last_active_time
    last_active_time[chat_id] = time.time()
    keyboard = Keyboard(one_time_keyboard=True, resize_keyboard=True)

    # try:
    #     sql = "SELECT * FROM Tg_users WHERE telegram_id=%s"
    #     cursor.execute(sql, (chat_id,))
    #     result = cursor.fetchall()
    # except Exception as e:
    #     logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}')
    result = fetch_users(message)
    if result is None:
        button1 = Button('\U0001F386 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        keyboard.add(button1)
        bot.send_message(
            chat_id=chat_id,
            text=(
                '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–∞–ø–±–æ—Ä–¥–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É. '
                '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:'
            ), reply_markup=keyboard
        )
    else:
        button2 = Button('\U0001F6F6 –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–ø–±–æ—Ä–¥')
        button3 = Button('\U0001F92C –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π')
        keyboard.add(button2, button3)
        if result.get('first_name', None):
            name = result.get('first_name', None)
        else:
            name = result.get('username', None)
        bot.reply_to(
            message, (
                f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {name}! '
                '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:'
            ), reply_markup=keyboard
        )


@bot.message_handler(
        func=lambda message: message.text == '\U0001F386 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
def register_user(message: Message):
    chat_id = message.chat.id
    global last_active_time
    last_active_time[chat_id] = time.time()
    try:
        keyboard = Keyboard(
            one_time_keyboard=True, resize_keyboard=True
        )
        contact_button = Button(
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üìû", request_contact=True
        )
        keyboard.add(contact_button)
        bot.send_message(
            chat_id,
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')
        bot.send_message(chat_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


@bot.message_handler(content_types=["contact"])
def save_contact(message):
    global last_active_time
    last_active_time[message.chat.id] = time.time()

    try:
        insert_user(message)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ë–î: {e}')
        return

    keyboard = Keyboard(one_time_keyboard=True, resize_keyboard=True)
    button2 = Button('\U0001F6F6 –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–ø–±–æ—Ä–¥')
    button3 = Button('\U0001F92C –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π')
    keyboard.add(button2, button3)
    bot.send_message(
        message.chat.id,
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ!",
        reply_markup=keyboard
    )


@bot.message_handler(
    func=lambda message: message.text == '\U0001F92C –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π'
)
def call_me(message: Message):
    global last_active_time
    last_active_time[message.chat.id] = time.time()
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å')
    bot.send_message(
        message.chat.id,
        '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.'
    )
    main_menu(message.chat.id)
    username = message.from_user.username
    bot.send_message(
        ADMIN_ID,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º!'
    )
    result = fetch_users(message)
    if result is not None:
        bot.send_message(ADMIN_ID, f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î {result}')


@bot.message_handler(
        func=lambda message: message.text == '\U0001F6F6 –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–ø–±–æ—Ä–¥'
)
def order_sup(message: Message):
    global last_active_time
    last_active_time[message.chat.id] = time.time()
    result = fetch_users(message)
    if result is None:
        logger.error(
            f'–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} '
            '–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
        )
        start(message)
        return
    global order
    order = Order(customer_id=result['id'])
    logger.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {result} –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –∑–∞–∫–∞–∑—É.')
    keyboard = InKeyboard(row_width=2)
    buttons = []
    for i in range(1, 6):
        buttons.append(InButton(str(i), callback_data=f'qty_{i}'))
    keyboard.add(*buttons)
    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–ø–±–æ—Ä–¥–æ–≤:',
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('qty_'))
def choose_qty(call):
    global last_active_time
    last_active_time[call.message.chat.id] = time.time()
    quantity = int(call.data.split('_')[1])
    global order
    order.order_quantity = quantity
    keyboard = InKeyboard(row_width=2)
    buttons = []
    for i in range(0, 6):
        day = date.today() + timedelta(days=i)
        buttons.append(
            InButton(str(day.strftime('%d.%m')),
                     callback_data=f'date_{day}'))
    keyboard.add(*buttons)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {quantity}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:',
        reply_markup=keyboard
    )


@bot.callback_query_handler(
        func=lambda call: call.data.startswith('date_')
)
def choose_date(call):
    global last_active_time
    last_active_time[call.message.chat.id] = time.time()
    delivery_date = call.data.split('_')[1]
    global order
    order.order_date = delivery_date
    keyboard = InKeyboard(row_width=2)
    options = ['–°–ø–∞—Å.–∂–∏–ª–µ—Ç', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∞—Å–æ—Å', '–ë–µ–∑ –¥–æ–ø.–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è']
    buttons = [InButton(
        opt, callback_data=f'opt_{opt.lower()}'
        ) for opt in options]
    keyboard.add(*buttons)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=(
            f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:'),
        reply_markup=keyboard
    )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith('opt_')
)
def choose_option(call):
    global last_active_time
    last_active_time[call.message.chat.id] = time.time()
    option = call.data.split('_')[1].capitalize()
    global order
    order.order_options = option
    keyboard = InKeyboard()
    confirm_btn = InButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='confirm')
    cancel_btn = InButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    keyboard.add(confirm_btn, cancel_btn)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=(
            '–í–∞—à –∑–∞–∫–∞–∑:\n'
            f'–ö–æ–ª-–≤–æ —Å–∞–ø–±–æ—Ä–¥–æ–≤: {order.order_quantity}\n'
            f'–ü–æ–ª—É—á–µ–Ω–∏–µ: {order.order_date}\n'
            f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {order.order_options}\n'
            '–ì–æ—Ç–æ–≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?'
            ),
        reply_markup=keyboard
    )


@bot.callback_query_handler(
        func=lambda call: call.data == 'confirm')
def confirm_order(call):
    global last_active_time
    last_active_time[call.message.chat.id] = time.time()
    if order is not None and order.save_to_db():
        bot.send_message(
            chat_id=call.message.chat.id,
            text='–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!'
        )
        bot.send_message(ADMIN_ID, f'–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order}')
    else:
        bot.send_message(
            chat_id=call.message.chat.id,
            text=(
                '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
                )
        )
        bot.send_message(
            ADMIN_ID, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç @{call.message.chat.username}'
        )
    main_menu(call.message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_order(call):
    global last_active_time
    last_active_time[call.message.chat.id] = time.time()
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
    )
    global order
    order = None

    main_menu(call.message.chat.id)


if __name__ == '__main__':
    bot.polling(none_stop=True)
